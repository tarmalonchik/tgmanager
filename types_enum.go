// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package tgmanager

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// CallBackAppearTypeUpdate is a CallBackAppearType of type update.
	CallBackAppearTypeUpdate CallBackAppearType = "update"
	// CallBackAppearTypeResend is a CallBackAppearType of type resend.
	CallBackAppearTypeResend CallBackAppearType = "resend"
	// CallBackAppearTypeResendDeleteOld is a CallBackAppearType of type resend_delete_old.
	CallBackAppearTypeResendDeleteOld CallBackAppearType = "resend_delete_old"
)

var ErrInvalidCallBackAppearType = errors.New("not a valid CallBackAppearType")

// String implements the Stringer interface.
func (x CallBackAppearType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CallBackAppearType) IsValid() bool {
	_, err := ParseCallBackAppearType(string(x))
	return err == nil
}

var _CallBackAppearTypeValue = map[string]CallBackAppearType{
	"update":            CallBackAppearTypeUpdate,
	"resend":            CallBackAppearTypeResend,
	"resend_delete_old": CallBackAppearTypeResendDeleteOld,
}

// ParseCallBackAppearType attempts to convert a string to a CallBackAppearType.
func ParseCallBackAppearType(name string) (CallBackAppearType, error) {
	if x, ok := _CallBackAppearTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _CallBackAppearTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return CallBackAppearType(""), fmt.Errorf("%s is %w", name, ErrInvalidCallBackAppearType)
}
