// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package tgmanager

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// CallBackAppearTypeUpdate is a CallBackAppearType of type update.
	CallBackAppearTypeUpdate CallBackAppearType = "update"
	// CallBackAppearTypeResend is a CallBackAppearType of type resend.
	CallBackAppearTypeResend CallBackAppearType = "resend"
	// CallBackAppearTypeResendDeleteOld is a CallBackAppearType of type resend_delete_old.
	CallBackAppearTypeResendDeleteOld CallBackAppearType = "resend_delete_old"
)

var ErrInvalidCallBackAppearType = errors.New("not a valid CallBackAppearType")

// String implements the Stringer interface.
func (x CallBackAppearType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CallBackAppearType) IsValid() bool {
	_, err := ParseCallBackAppearType(string(x))
	return err == nil
}

var _CallBackAppearTypeValue = map[string]CallBackAppearType{
	"update":            CallBackAppearTypeUpdate,
	"resend":            CallBackAppearTypeResend,
	"resend_delete_old": CallBackAppearTypeResendDeleteOld,
}

// ParseCallBackAppearType attempts to convert a string to a CallBackAppearType.
func ParseCallBackAppearType(name string) (CallBackAppearType, error) {
	if x, ok := _CallBackAppearTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _CallBackAppearTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return CallBackAppearType(""), fmt.Errorf("%s is %w", name, ErrInvalidCallBackAppearType)
}

const (
	// CallbackProcessorTypeProcess is a CallbackProcessorType of type Process.
	CallbackProcessorTypeProcess CallbackProcessorType = iota
	// CallbackProcessorTypeBack is a CallbackProcessorType of type Back.
	CallbackProcessorTypeBack
	// CallbackProcessorTypeClose is a CallbackProcessorType of type Close.
	CallbackProcessorTypeClose
	// CallbackProcessorTypeSkip is a CallbackProcessorType of type Skip.
	CallbackProcessorTypeSkip
	// CallbackProcessorTypeIgnore is a CallbackProcessorType of type Ignore.
	CallbackProcessorTypeIgnore
)

var ErrInvalidCallbackProcessorType = errors.New("not a valid CallbackProcessorType")

const _CallbackProcessorTypeName = "processbackcloseskipignore"

var _CallbackProcessorTypeMap = map[CallbackProcessorType]string{
	CallbackProcessorTypeProcess: _CallbackProcessorTypeName[0:7],
	CallbackProcessorTypeBack:    _CallbackProcessorTypeName[7:11],
	CallbackProcessorTypeClose:   _CallbackProcessorTypeName[11:16],
	CallbackProcessorTypeSkip:    _CallbackProcessorTypeName[16:20],
	CallbackProcessorTypeIgnore:  _CallbackProcessorTypeName[20:26],
}

// String implements the Stringer interface.
func (x CallbackProcessorType) String() string {
	if str, ok := _CallbackProcessorTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CallbackProcessorType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CallbackProcessorType) IsValid() bool {
	_, ok := _CallbackProcessorTypeMap[x]
	return ok
}

var _CallbackProcessorTypeValue = map[string]CallbackProcessorType{
	_CallbackProcessorTypeName[0:7]:                    CallbackProcessorTypeProcess,
	strings.ToLower(_CallbackProcessorTypeName[0:7]):   CallbackProcessorTypeProcess,
	_CallbackProcessorTypeName[7:11]:                   CallbackProcessorTypeBack,
	strings.ToLower(_CallbackProcessorTypeName[7:11]):  CallbackProcessorTypeBack,
	_CallbackProcessorTypeName[11:16]:                  CallbackProcessorTypeClose,
	strings.ToLower(_CallbackProcessorTypeName[11:16]): CallbackProcessorTypeClose,
	_CallbackProcessorTypeName[16:20]:                  CallbackProcessorTypeSkip,
	strings.ToLower(_CallbackProcessorTypeName[16:20]): CallbackProcessorTypeSkip,
	_CallbackProcessorTypeName[20:26]:                  CallbackProcessorTypeIgnore,
	strings.ToLower(_CallbackProcessorTypeName[20:26]): CallbackProcessorTypeIgnore,
}

// ParseCallbackProcessorType attempts to convert a string to a CallbackProcessorType.
func ParseCallbackProcessorType(name string) (CallbackProcessorType, error) {
	if x, ok := _CallbackProcessorTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _CallbackProcessorTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return CallbackProcessorType(0), fmt.Errorf("%s is %w", name, ErrInvalidCallbackProcessorType)
}
